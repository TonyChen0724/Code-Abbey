/** Yacht or Dice Poker
  * Tony
  */

// current: the full-House dropped the ball
import java.util.*;

public class Solution75 {
  
  public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    int times = sc.nextInt();
    for (int i = 0; i < times; i++) {
      /* input five numbers */
      int a = sc.nextInt();
      int b = sc.nextInt();
      int c = sc.nextInt();
      int d = sc.nextInt();
      int e = sc.nextInt();
      
      /* condition for pair, two-pairs, three, four, yacht, 
       * full-house, small-straight, big-straight or none, */
      
      if (pair(a,b,c,d,e)) {
        System.out.print("pair ");
      }
      else if (twoPairs(a,b,c,d,e)) {
        System.out.print("two-pairs ");
      }
      else if (three(a,b,c,d,e)) {
        System.out.print("three ");
      }
      else if (four(a,b,c,d,e)) {
        System.out.print("four ");
      }
      else if (yacht(a,b,c,d,e)) {
        System.out.print("yacht ");
      }
      else if (fullHouse(a,b,c,d,e)) {
        System.out.print("full-house ");
      }
      else if (smallStraight(a,b,c,d,e)) {
        System.out.print("small-straight ");
      }
      else if (bigStraight(a,b,c,d,e)) {
        System.out.print("big-straight ");
      }
      else {
        System.out.print("none ");
      }
    }
  }
  /** pair
    * there is only two same integers in 5 input integers */
  private static boolean pair(int e, int f, int g, int h, int i) {
    int count = 0; // count the same integer cases
    if (e == f) {count ++;}
    if (e == g) {count ++;}
    if (e == h) {count ++;}
    if (e == i) {count ++;}
    if (f == g) {count ++;}
    if (f == h) {count ++;}
    if (f == i) {count ++;}
    if (g == h) {count ++;}
    if (g == i) {count ++;}
    if (h == i) {count ++;}
    
    if (count == 1) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private static boolean twoPairs(int e, int f, int g, int h, int i) {
    int count = 0; // count the same integer cases
    if (e == f) {count ++;}
    if (e == g) {count ++;}
    if (e == h) {count ++;}
    if (e == i) {count ++;}
    if (f == g) {count ++;}
    if (f == h) {count ++;}
    if (f == i) {count ++;}
    if (g == h) {count ++;}
    if (g == i) {count ++;}
    if (h == i) {count ++;}
    
    if (count == 2 && !(three(e,f,g,h,i))) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private static boolean three(int e, int f, int g, int h, int i) {
    int countThree = 0;
    if (threeSame(e,f,g)) {countThree ++;}
    if (threeSame(e,f,h)) {countThree ++;}
    if (threeSame(e,f,i)) {countThree ++;}
    if (threeSame(e,g,h)) {countThree ++;}
    if (threeSame(e,g,i)) {countThree ++;}
    if (threeSame(e,h,i)) {countThree ++;}
    if (threeSame(f,g,h)) {countThree ++;}
    if (threeSame(f,g,i)) {countThree ++;}
    if (threeSame(f,h,i)) {countThree ++;}
    if (threeSame(g,h,i)) {countThree ++;}
    
    // current we have to make sure it only has one pair which is generated by itself
    int countPairs = 0; // count the same integer cases
    if (e == f) {countPairs ++;}
    if (e == g) {countPairs ++;}
    if (e == h) {countPairs ++;}
    if (e == i) {countPairs ++;}
    if (f == g) {countPairs ++;}
    if (f == h) {countPairs ++;}
    if (f == i) {countPairs ++;}
    if (g == h) {countPairs ++;}
    if (g == i) {countPairs ++;}
    if (h == i) {countPairs ++;}
    
    if (countThree == 1 && countPairs == 3) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private static boolean four(int e, int f, int g, int h, int i) {
    int count = 0;
    if (fourSame(e,f,g,h)) {count ++;}
    if (fourSame(e,f,g,i)) {count ++;}
    if (fourSame(e,g,h,i)) {count ++;}
    
    if (fourSame(f,g,h,i)) {count ++;}
    if (fourSame(e,f,h,i)) {count ++;}
    
    if (count == 1) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private static boolean yacht(int e, int f, int g, int h, int i) {
    if (e == f && f == g && g == h && h == i) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private static boolean fullHouse(int e, int f, int g, int h, int i) {
    /* if it's a combination with pair and three
     * we will first have one three.*/
    int countThree = 0;
    if (threeSame(e,f,g)) {countThree ++;}
    if (threeSame(e,f,h)) {countThree ++;}
    if (threeSame(e,f,i)) {countThree ++;}
    if (threeSame(e,g,h)) {countThree ++;}
    if (threeSame(e,g,i)) {countThree ++;}
    if (threeSame(e,h,i)) {countThree ++;}
    if (threeSame(f,g,h)) {countThree ++;}
    if (threeSame(f,g,i)) {countThree ++;}
    if (threeSame(f,h,i)) {countThree ++;}
    if (threeSame(g,h,i)) {countThree ++;}
    /* if countThree is not 1 */
    if (countThree != 1) {
      //System.out.println("false1"); // debug
      return false;
      
    }
    /* if it is one, then we at least have one three now,
     * which gives us three pair (generate from three) and one pair more
     * four pairs */
    else {
      int countPairs = 0; // count the pair cases
      if (e == f) {countPairs ++;}
      if (e == g) {countPairs ++;}
      if (e == h) {countPairs ++;}
      if (e == i) {countPairs ++;}
      if (f == g) {countPairs ++;}
      if (f == h) {countPairs ++;}
      if (f == i) {countPairs ++;}
      if (g == h) {countPairs ++;}
      if (g == i) {countPairs ++;}
      if (h == i) {countPairs ++;}
      
      if (countPairs == 4) {
        return true;
      }
      
      else {
        //System.out.println("false2"); // debug
        return false;
   
      }
    }
  }
  
  private static boolean smallStraight(int e, int f, int g, int h, int i) {
    /* generate an array contains the list */
    int[] numlist = {e, f, g, h, i};
    
    Arrays.sort(numlist);
    
    if (numlist[0] == 1 && numlist[1] == 2 && numlist[2] == 3 && numlist[3] == 4 && numlist[4] == 5) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private static boolean bigStraight(int e, int f, int g, int h, int i) {
    /* generate an array contains the list */
    int[] numlist = {e, f, g, h, i};
    
    Arrays.sort(numlist);
    
    if (numlist[0] == 2 && numlist[1] == 3 && numlist[2] == 4 && numlist[3] == 5 && numlist[4] == 6) {
      return true;
    }
    else {
      return false;
    }
  }
  
  
  private static boolean threeSame(int a, int b, int c) {
    if (a == b & b == c) {
      return true;
    }
    else {
      return false;
    }
  }
  
  private static boolean fourSame(int a, int b, int c, int d) {
    if (a == b & b == c & c == d) {
      return true;
    }
    else {
      return false;
    }
  }
  
}
  
    
  
  
    
    
  
